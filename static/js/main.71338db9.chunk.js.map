{"version":3,"sources":["TvShowsAvenger.jsx","App.js","reportWebVitals.js","index.js"],"names":["TvShowsAvenger","props","useState","data","setData","getList","a","axios","get","then","res","console","log","catch","err","useEffect","loadGenres","arr","labels","map","label","i","push","className","TableContainer","Table","sx","minWidth","size","TableHead","TableRow","TableCell","align","TableBody","row","border","component","scope","style","display","href","show","url","target","name","language","genres","length","runtime","premiered","moment","format","rating","average","network","country","image","medium","src","alt","App","state","sessionStart","path","element","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71338db9.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-target-blank */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable array-callback-return*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport './App.css'\r\n\r\nconst TvShowsAvenger = (props) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    const getList = async () => {\r\n        await axios.get('https://api.tvmaze.com/search/shows?q=avengers')\r\n            .then(res => {\r\n                console.log(res.data)\r\n                setData(res.data);\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n\r\n\r\n    const loadGenres = (arr) => {\r\n        let labels = []\r\n        arr.map((label, i) => {\r\n            labels.push(<div className=\"labels\">{label}</div>)\r\n        })\r\n        return labels;\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <div className=\"container-fluid mt-2\">\r\n                <div className=\"row\">\r\n                    <TableContainer>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell><b>Name</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Language</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Genres</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Runtime</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Premiered</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Rating</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Country name</b></TableCell>\r\n                                    <TableCell align=\"right\"><b>Thumbnail</b></TableCell>\r\n\r\n\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {data.map((row) => (\r\n                                    <TableRow\r\n                                        key={row.name}\r\n                                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                    >\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            <a style={{ display: \"table-cell\" }} href={row.show.url} target=\"_blank\">{row.show.name ? row.show.name : \"N/A\"}</a>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{row.show.language}</TableCell>\r\n                                        <TableCell align=\"right\">{row.show.genres && row.show.genres.length ? loadGenres(row.show.genres) : \"N/A\"}</TableCell>\r\n                                        <TableCell align=\"right\">{row.show.runtime ? row.show.runtime : \"N/A\"}</TableCell>\r\n                                        <TableCell align=\"right\">{row.show.premiered ? moment(row.show.premiered).format('DD/MMM/yyyy') : \"N/A\"}</TableCell>\r\n                                        <TableCell align=\"right\">{row.show.rating.average ? row.show.rating.average : 'N/A'}</TableCell>\r\n                                        <TableCell align=\"right\">{(row.show && row.show.network && row.show.network.country.name ? row.show.network.country.name : 'N/A')}</TableCell>\r\n                                        <TableCell align=\"right\">{(row.show.image && row.show.image.medium) ? <img src={row.show.image.medium} alt=\"\" className=\"imgThumbnail\" /> : 'N/A'}</TableCell>\r\n\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default TvShowsAvenger;","import React from 'react';\nimport { BrowserRouter, Routes , Route } from 'react-router-dom';\nimport TvShowsAvenger from './TvShowsAvenger';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sessionStart: false\n    }\n\n  } // end constructor\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Routes >\n            <Route path='/tv-shows/avengers' element={<TvShowsAvenger/>}  />\n          </Routes >\n        </BrowserRouter>\n      </div>\n    );\n  }\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}